- args:
    cascade: false
    read_only: false
    sql: CREATE EXTENSION IF NOT EXISTS pgcrypto;
  type: run_sql
- args:
    cascade: false
    read_only: false
    sql: |-
      CREATE TABLE "public"."users"
      (
      	"id" uuid NOT NULL DEFAULT gen_random_uuid(),
      	"createdAt" timestamptz NOT NULL DEFAULT now(),
      	"updatedAt" timestamptz NOT NULL DEFAULT now(),
      	"createdBy" uuid,
      	"updatedBy" uuid,
      	"email" text NOT NULL,
      	"firstName" text NOT NULL,
      	"lastName" text NOT NULL,
      	"googleId" text,
      	"isAdmin" boolean NOT NULL DEFAULT false,
      	"picture" text,
      	"locale" text NOT NULL DEFAULT 'en',
      	PRIMARY KEY ("id") ,
      	UNIQUE ("email"),
      	UNIQUE ("googleId")
      );
      CREATE OR REPLACE FUNCTION "public"."set_current_timestamp_updatedAt"()
        RETURNS TRIGGER AS $$
        DECLARE _new record;
        BEGIN
          _new := NEW;
          _new."updatedAt"
              = NOW();
          RETURN _new;
        END;
      $$ LANGUAGE plpgsql;
      CREATE TRIGGER "set_public_users_updatedAt"
        BEFORE UPDATE ON "public"."users"
        FOR EACH ROW
        EXECUTE PROCEDURE "public"."set_current_timestamp_updatedAt"();
      COMMENT ON TRIGGER "set_public_users_updatedAt" ON "public"."users"
        IS 'trigger to set value of column "updatedAt" to current timestamp on row update';
  type: run_sql
- args:
    name: users
    schema: public
  type: add_existing_table_or_view
- args:
    cascade: false
    read_only: false
    sql: |-
      alter table "public"."users"
                 add constraint "users_createdBy_fkey"
                 foreign key ("createdBy")
                 references "public"."users"
                 ("id") on update restrict on delete restrict;
  type: run_sql
- args:
    cascade: false
    read_only: false
    sql: |-
      alter table "public"."users"
                 add constraint "users_updatedBy_fkey"
                 foreign key ("updatedBy")
                 references "public"."users"
                 ("id") on update restrict on delete restrict;
  type: run_sql
- args:
    name: createdByUser
    table:
      name: users
      schema: public
    using:
      foreign_key_constraint_on: createdBy
  type: create_object_relationship
- args:
    name: updatedByUser
    table:
      name: users
      schema: public
    using:
      foreign_key_constraint_on: updatedBy
  type: create_object_relationship
- args:
    cascade: false
    read_only: false
    sql: |-
      CREATE TABLE "public"."sessions"(
      	"id" uuid NOT NULL DEFAULT gen_random_uuid(),
      	"createdAt" timestamptz NOT NULL DEFAULT now(),
      	"updatedAt" timestamptz NOT NULL DEFAULT now(),
      	"userId" uuid NOT NULL,
      	"provider" text NOT NULL,
      	"token" text NOT NULL,
      	PRIMARY KEY ("id") ,
      	FOREIGN KEY ("userId") REFERENCES "public"."users"("id") ON UPDATE restrict ON DELETE cascade
      );
      CREATE OR REPLACE FUNCTION "public"."set_current_timestamp_updatedAt"()
        RETURNS TRIGGER AS $$
        DECLARE _new record;
        BEGIN
          _new := NEW;
          _new."updatedAt"
              = NOW();
          RETURN _new;
        END;
      $$ LANGUAGE plpgsql;
      CREATE TRIGGER "set_public_sessions_updatedAt"
        BEFORE UPDATE ON "public"."sessions"
        FOR EACH ROW
        EXECUTE PROCEDURE "public"."set_current_timestamp_updatedAt"();
      COMMENT ON TRIGGER "set_public_sessions_updatedAt" ON "public"."sessions"
        IS 'trigger to set value of column "updatedAt" to current timestamp on row update';
  type: run_sql
- args:
    name: sessions
    schema: public
  type: add_existing_table_or_view
- args:
    name: sessions
    table:
      name: users
      schema: public
    using:
      foreign_key_constraint_on:
        column: userId
        table:
          name: sessions
          schema: public
  type: create_array_relationship
- args:
    name: user
    table:
      name: sessions
      schema: public
    using:
      foreign_key_constraint_on: userId
  type: create_object_relationship
